import React from 'react';
import {storiesOf} from '@storybook/react';
import {MethodEditor, DataTypeEditor} from "../src";
import {DSLEditor} from "../src/dsl/DSLEditor";

const REST_METHODS = `
#Get todo 
@GET('/todo/{id}')
getTodo(@Path("id") todoId:string, @Query small:boolean):Todo

//Create Todo
// - ID is generated by client
@POST('/todo/{id}')
createTodo(@Path(id) todoId:string, @Body todo:Todo ):void`;

const METHODS = `
//A method that has a user-defined type as parameter
someMethod(id:string, entity:TreeNode):void

//Very basic method
otherMethod(fullName:string, cookieId:string):void

//Method that returns user defined type
thirdOne():TreeNode`;

const DATA_TYPES = `
//Tree structure data entity
TreeNode {
    id:string
    parent:TreeNode
    children:TreeNode[]
    attributes: [{
        id:string
        value: string
    }]    
}

//An object representing a todo in a todo list
Todo {
    id:string
    status:string
}`;

storiesOf('Definition Editors', module)

    .add("DSL Editor", () => (
        <div>
            <DSLEditor types={true}
                       methods={true}
                       onChange={result => console.log('result', result)}
                       value={'## Types\n' + DATA_TYPES + '\n\n## Methods\n' + METHODS} />
        </div>
    ))

    .add("DSL Editor (REST)", () => (
        <div>
            <DSLEditor types={true}
                       methods={true}
                       rest={true}
                       onChange={result => console.log('result', result)}
                       value={'## Types\n' + DATA_TYPES + '\n\n## REST methods\n' + REST_METHODS} />
        </div>
    ))

    .add("REST Method Editor", () => (
        <div>
            <MethodEditor value={REST_METHODS}
                          validTypes={['Todo']}
                          onChange={result => console.log('result', result)}
                          restMethods={true} />
        </div>
    ))
    .add("Method Editor", () => (
        <div>
            <MethodEditor value={METHODS}
                          onChange={result => console.log('result', result)}
                          validTypes={['TreeNode']}  />
        </div>
    ))
    .add("Data Type Editor", () => (
        <div>
            <DataTypeEditor value={DATA_TYPES}
                            onChange={result => console.log('result', result)}/>
        </div>
    ))


