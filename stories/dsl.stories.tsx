import React from 'react';
import { DataTypeEditor, DSLDataType, DSLEntity, DSLEntityType, DSLMethod, DSLRichEntity, MethodEditor } from '../src';
import { DSLEditor } from '../src/dsl/DSLEditor';
import { ConfigurationEditor } from '../src/dsl/ConfigurationEditor';

const REST_METHODS = `
#Get todo 
@GET('/todo/{id}')
getTodo(@Path("id") todoId:string, @Query flags:string[]):Todo

//Create Todo
// - ID is generated by client
@POST('/todo/{id}')
createTodo(@Path(id) todoId:string, @Body todo:Todo ):void`;

const METHODS = `
//A method that has a user-defined type as parameter
someMethod(id:string, entity:TreeNode):void

//Very basic method
otherMethod(fullName:string, cookieId:string, tags:string[]):void

//Method that returns user defined type
thirdOne():TreeNode[]`;

const DATA_TYPES = `
//Enum values for status
enum Status {
    ENABLED,
    DISABLED,
    UNKNOWN
}
//Tree structure data entity
TreeNode {
    id:string
    parent:TreeNode
    children:TreeNode[]
    status: Status
    attributes: [{
        id:string
        value: string
    }]    
}

//An object representing a todo in a todo list
Todo {
    id:string
    status:string
}`;

const CONFIGURATION = `
//Enum values for status
enum Status {
    ENABLED,
    DISABLED,
    UNKNOWN
}
//Credentials for some service
SomeServiceCredentials {
    
    //Api Key for some service
    @secret
    apiKey:string
    
    //Name for service
    @required
    name:string = 'My API'
        
    state:Status = Status.ENABLED
}

//An object representing a todo in a todo list
CoreConfig {
    //Set name of app
    appName:string = "My App"
    
    //Set color of app
    color:string = "#123"
    
    //Timeout for some service
    ttl:integer = 1000
    
    enabled:boolean = true
    
    gateway:Instance
    
    gatewayResource:InstanceProvider
}`;

const CONFIGURATION_ENTITIES: DSLEntity[] = [
    {
        type: DSLEntityType.ENUM,
        name: 'Status',
        description: 'Enum values for status',
        annotations: [],
        values: ['ENABLED', 'DISABLED', 'UNKNOWN'],
    },
    {
        type: DSLEntityType.DATATYPE,
        name: 'SomeServiceCredentials',
        description: 'Credentials for some service',
        annotations: [],
        properties: [
            {
                name: 'apiKey',
                annotations: [
                    {
                        type: '@secret',
                        arguments: [],
                    },
                ],
                description: 'Api Key for some service',
                type: 'string',
                defaultValue: null,
            },
            {
                name: 'name',
                annotations: [
                    {
                        type: '@required',
                        arguments: [],
                    },
                ],
                description: 'Name for service',
                type: 'string',
                defaultValue: {
                    type: 'literal',
                    value: '"My API"',
                },
            },
            {
                name: 'state',
                annotations: [],
                description: null,
                type: 'Status',
                defaultValue: {
                    type: 'enum',
                    value: 'Status.ENABLED',
                },
            },
        ],
    },
    {
        type: DSLEntityType.DATATYPE,
        name: 'CoreConfig',
        description: 'An object representing a todo in a todo list',
        annotations: [],
        properties: [
            {
                name: 'appName',
                annotations: [],
                description: 'Set name of app',
                type: 'string',
                defaultValue: {
                    type: 'literal',
                    value: '"My App"',
                },
            },
            {
                name: 'color',
                annotations: [],
                description: 'Set color of app',
                type: 'string',
                defaultValue: {
                    type: 'literal',
                    value: '"#123"',
                },
            },
            {
                name: 'ttl',
                annotations: [],
                description: 'Timeout for some service',
                type: 'integer',
                defaultValue: {
                    type: 'literal',
                    value: 1000,
                },
            },
            {
                name: 'enabled',
                type: 'boolean',
                defaultValue: {
                    type: 'literal',
                    value: true,
                },
            },
        ],
    },
];

const DATA_TYPE_ENTITIES: DSLEntity[] = [
    {
        type: DSLEntityType.ENUM,
        name: 'Status',
        description: 'Enum values for status',
        values: ['ENABLED', 'DISABLED', 'UNKNOWN'],
    },
    {
        type: DSLEntityType.DATATYPE,
        name: 'MyDataType',
        description: 'Some info about my data type\nWith multiple lines',
        properties: [
            {
                name: 'id',
                type: 'string',
            },
            {
                name: 'tags',
                type: { name: 'string', list: true },
            },
            {
                name: 'children',
                type: 'object',
                properties: [
                    {
                        name: 'childId',
                        type: 'integer',
                    },
                ],
            },
        ],
    },
    {
        type: DSLEntityType.DATATYPE,
        name: 'MyDataType2',
        description: 'Some info about my data type\nWith multiple lines',
        properties: [
            {
                name: 'id',
                type: 'string',
            },
            {
                name: 'tags',
                type: { name: 'string', list: true },
            },
            {
                name: 'children',
                type: { name: 'object', list: true },
                properties: [
                    {
                        name: 'childId',
                        type: 'integer',
                    },
                ],
            },
        ],
    },
];

const REST_METHOD_ENTITIES: DSLEntity[] = [
    {
        type: DSLEntityType.METHOD,
        name: 'myMethod',
        description: 'Some info about my method\nWith multiple lines',
        returnType: 'void',
        annotations: [
            {
                type: '@GET',
                arguments: ['/some/{id}'],
            },
        ],
        parameters: [
            {
                name: 'id',
                type: 'string',
                annotations: [
                    {
                        type: '@Path',
                    },
                ],
            },
            {
                name: 'tags',
                type: { name: 'string', list: true },
                annotations: [
                    {
                        type: '@Query',
                        arguments: ['_tags'],
                    },
                ],
            },
        ],
    },
    {
        type: DSLEntityType.METHOD,
        name: 'myMethod2',
        description: 'Some info about my method\nWith multiple lines',
        returnType: 'void',
        annotations: [
            {
                type: '@GET',
                arguments: ['/some/{id}'],
            },
        ],
        parameters: [
            {
                name: 'id',
                type: 'string',
                annotations: [
                    {
                        type: '@Path',
                    },
                ],
            },
            {
                name: 'tags',
                type: 'string',
                annotations: [
                    {
                        type: '@Query',
                        arguments: ['_tags'],
                    },
                ],
            },
        ],
    },
];

const METHOD_ENTITIES: DSLMethod[] = [
    {
        type: DSLEntityType.METHOD,
        name: 'myMethod',
        description: 'Some info about my method\nWith multiple lines',
        returnType: 'void',
        parameters: [
            {
                name: 'id',
                type: 'string',
            },
            {
                name: 'tags',
                type: { name: 'string', list: true },
            },
        ],
    },
    {
        type: DSLEntityType.METHOD,
        name: 'myMethod2',
        description: 'Some info about my method\nWith multiple lines',
        returnType: { name: 'string', list: true },
        parameters: [
            {
                name: 'id',
                type: 'string',
            },
            {
                name: 'tags',
                type: 'string',
            },
        ],
    },
];

export default {
    title: 'DSL Editors',
};

export const DslEditor = () => (
    <div>
        <DSLEditor
            types={true}
            methods={true}
            onChange={(result) => console.log('result', result)}
            value={'## Types\n' + DATA_TYPES + '\n\n## Methods\n' + METHODS}
        />
    </div>
);

DslEditor.story = {
    name: 'DSL Editor',
};

export const DslEditorObject = () => (
    <div>
        <DSLEditor
            types={true}
            methods={true}
            onChange={(result) => console.log('result', result)}
            value={{
                code: '',
                entities: [...DATA_TYPE_ENTITIES, ...METHOD_ENTITIES],
            }}
        />
    </div>
);

DslEditorObject.story = {
    name: 'DSL Editor (Object)',
};

export const DslEditorRest = () => (
    <div>
        <DSLEditor
            types={true}
            methods={true}
            rest={true}
            onChange={(result) => console.log('result', result)}
            value={'## Types\n' + DATA_TYPES + '\n\n## REST methods\n' + REST_METHODS}
        />
    </div>
);

DslEditorRest.story = {
    name: 'DSL Editor (REST)',
};

export const DslEditorRestObject = () => (
    <div>
        <DSLEditor
            types={true}
            methods={true}
            rest={true}
            onChange={(result) => console.log('result', result)}
            value={{
                code: '',
                entities: [...DATA_TYPE_ENTITIES, ...REST_METHOD_ENTITIES],
            }}
        />
    </div>
);

DslEditorRestObject.story = {
    name: 'DSL Editor (REST - Object)',
};

export const RestMethodEditor = () => (
    <div>
        <MethodEditor
            value={REST_METHODS}
            validTypes={['Todo']}
            onChange={(result) => console.log('result', result)}
            restMethods={true}
        />
    </div>
);

RestMethodEditor.story = {
    name: 'REST Method Editor',
};

export const RestMethodEditorObject = () => (
    <div>
        <MethodEditor
            value={{ code: '', entities: REST_METHOD_ENTITIES }}
            validTypes={['Todo']}
            onChange={(result) => console.log('result', result)}
            restMethods={true}
        />
    </div>
);

RestMethodEditorObject.story = {
    name: 'REST Method Editor (Object)',
};

export const _MethodEditor = () => (
    <div>
        <MethodEditor value={METHODS} onChange={(result) => console.log('result', result)} validTypes={['TreeNode']} />
    </div>
);

export const MethodEditorObject = () => (
    <div>
        <MethodEditor
            value={{ code: '', entities: METHOD_ENTITIES }}
            onChange={(result) => console.log('result', result)}
            validTypes={['TreeNode']}
        />
    </div>
);

MethodEditorObject.story = {
    name: 'Method Editor (Object)',
};

export const _DataTypeEditor = () => (
    <div>
        <DataTypeEditor value={DATA_TYPES} onChange={(result) => console.log('result', result)} />
    </div>
);

export const DataTypeEditorObject = () => (
    <div>
        <DataTypeEditor
            value={{ entities: DATA_TYPE_ENTITIES, code: '' }}
            onChange={(result) => console.log('result', result)}
        />
    </div>
);

DataTypeEditorObject.story = {
    name: 'Data Type Editor (Object)',
};

export const _ConfigurationEditor = () => (
    <div>
        <ConfigurationEditor value={CONFIGURATION} onChange={(result) => console.log('result', result)} />
    </div>
);

export const ConfigurationEditorObject = () => (
    <div>
        <ConfigurationEditor
            value={{ entities: CONFIGURATION_ENTITIES, code: '' }}
            onChange={(result) => console.log('result', result)}
        />
    </div>
);

ConfigurationEditorObject.story = {
    name: 'Configuration Editor (Object)',
};
