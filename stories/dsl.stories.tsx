import React from 'react';
import {storiesOf} from '@storybook/react';
import {DataTypeEditor, DSLDataType, DSLEntityType, DSLMethod, MethodEditor} from "../src";
import {DSLEditor} from "../src/dsl/DSLEditor";

const REST_METHODS = `
#Get todo 
@GET('/todo/{id}')
getTodo(@Path("id") todoId:string, @Query flags:string[]):Todo

//Create Todo
// - ID is generated by client
@POST('/todo/{id}')
createTodo(@Path(id) todoId:string, @Body todo:Todo ):void`;

const METHODS = `
//A method that has a user-defined type as parameter
someMethod(id:string, entity:TreeNode):void

//Very basic method
otherMethod(fullName:string, cookieId:string, tags:string[]):void

//Method that returns user defined type
thirdOne():TreeNode[]`;

const DATA_TYPES = `
//Tree structure data entity
TreeNode {
    id:string
    parent:TreeNode
    children:TreeNode[]
    attributes: [{
        id:string
        value: string
    }]    
}

//An object representing a todo in a todo list
Todo {
    id:string
    status:string
}`;

const DATA_TYPE_ENTITIES:DSLDataType[] = [
    {
        type: DSLEntityType.DATATYPE,
        name: 'MyDataType',
        description: 'Some info about my data type\nWith multiple lines',
        properties: [
            {
                name: 'id',
                type:'string'
            },
            {
                name: 'tags',
                type: {name: 'string', list:true},
            },
            {
                name: 'children',
                type: 'object',
                properties: [
                    {
                        name:'childId',
                        type:'integer'
                    }
                ]
            }
        ]
    },
    {
        type: DSLEntityType.DATATYPE,
        name: 'MyDataType2',
        description: 'Some info about my data type\nWith multiple lines',
        properties: [
            {
                name: 'id',
                type:'string'
            },
            {
                name: 'tags',
                type: {name: 'string', list:true}
            },
            {
                name: 'children',
                type: {name: 'object', list: true},
                properties: [
                    {
                        name:'childId',
                        type:'integer'
                    }
                ]
            }
        ]
    }
]

const REST_METHOD_ENTITIES:DSLMethod[] = [
    {
        type: DSLEntityType.METHOD,
        name: 'myMethod',
        description: 'Some info about my method\nWith multiple lines',
        returnType: 'void',
        annotations: [
            {
                type:'@GET',
                arguments: ['/some/{id}']
            }
        ],
        parameters: [
            {
                name: 'id',
                type:'string',
                annotations: [
                    {
                        type: '@Path'
                    }
                ]

            },
            {
                name: 'tags',
                type: {name:'string', list: true},
                annotations: [
                    {
                        type: '@Query',
                        arguments: ['_tags']
                    }
                ]
            }
        ]
    },
    {
        type: DSLEntityType.METHOD,
        name: 'myMethod2',
        description: 'Some info about my method\nWith multiple lines',
        returnType: 'void',
        annotations: [
            {
                type:'@GET',
                arguments: ['/some/{id}']
            }
        ],
        parameters: [
            {
                name: 'id',
                type:'string',
                annotations: [
                    {
                        type: '@Path'
                    }
                ]

            },
            {
                name: 'tags',
                type:'string',
                annotations: [
                    {
                        type: '@Query',
                        arguments: ['_tags']
                    }
                ]
            }
        ]
    }
]


const METHOD_ENTITIES:DSLMethod[] = [
    {
        type: DSLEntityType.METHOD,
        name: 'myMethod',
        description: 'Some info about my method\nWith multiple lines',
        returnType: 'void',
        parameters: [
            {
                name: 'id',
                type:'string'
            },
            {
                name: 'tags',
                type: {name:'string',list: true}
            }
        ]
    },
    {
        type: DSLEntityType.METHOD,
        name: 'myMethod2',
        description: 'Some info about my method\nWith multiple lines',
        returnType: {name:'string', list: true},
        parameters: [
            {
                name: 'id',
                type:'string'
            },
            {
                name: 'tags',
                type:'string'
            }
        ]
    }
]

storiesOf('DSL Editors', module)

    .add("DSL Editor", () => (
        <div>
            <DSLEditor types={true}
                       methods={true}
                       onChange={result => console.log('result', result)}
                       value={'## Types\n' + DATA_TYPES + '\n\n## Methods\n' + METHODS} />
        </div>
    ))

    .add("DSL Editor (Object)", () => (
        <div>
            <DSLEditor types={true}
                       methods={true}
                       onChange={result => console.log('result', result)}
                       value={{code:'', entities: [...DATA_TYPE_ENTITIES, ...METHOD_ENTITIES]}} />
        </div>
    ))

    .add("DSL Editor (REST)", () => (
        <div>
            <DSLEditor types={true}
                       methods={true}
                       rest={true}
                       onChange={result => console.log('result', result)}
                       value={'## Types\n' + DATA_TYPES + '\n\n## REST methods\n' + REST_METHODS} />
        </div>
    ))

    .add("DSL Editor (REST - Object)", () => (
        <div>
            <DSLEditor types={true}
                       methods={true}
                       rest={true}
                       onChange={result => console.log('result', result)}
                       value={{code:'', entities: [...DATA_TYPE_ENTITIES, ...REST_METHOD_ENTITIES]}} />
        </div>
    ))

    .add("REST Method Editor", () => (
        <div>
            <MethodEditor value={REST_METHODS}
                          validTypes={['Todo']}
                          onChange={result => console.log('result', result)}
                          restMethods={true} />
        </div>
    ))

    .add("REST Method Editor (Object)", () => (
        <div>
            <MethodEditor value={{code: '', entities: REST_METHOD_ENTITIES}}
                          validTypes={['Todo']}
                          onChange={result => console.log('result', result)}
                          restMethods={true} />
        </div>
    ))
    .add("Method Editor", () => (
        <div>
            <MethodEditor value={METHODS}
                          onChange={result => console.log('result', result)}
                          validTypes={['TreeNode']}  />
        </div>
    ))
    .add("Method Editor (Object)", () => (
        <div>
            <MethodEditor value={{code: '', entities: METHOD_ENTITIES}}
                          onChange={result => console.log('result', result)}
                          validTypes={['TreeNode']}  />
        </div>
    ))
    .add("Data Type Editor", () => (
        <div>
            <DataTypeEditor value={DATA_TYPES}
                            onChange={result => console.log('result', result)}/>
        </div>
    ))
    .add("Data Type Editor (Object)", () => (
        <div>
            <DataTypeEditor value={{entities:DATA_TYPE_ENTITIES, code:''}}
                            onChange={result => console.log('result', result)}/>
        </div>
    ))


