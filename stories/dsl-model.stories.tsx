/**
 * Copyright 2023 Kapeta Inc.
 * SPDX-License-Identifier: MIT
 */

import React from 'react';
import { ModelEditor, ModelValue, ModelValueType } from '../src/dsl/ModelEditor';

const REST_METHODS = `
#Get todo 
@GET('/todo/{id}')
getTodo(@Path("id") todoId:string, @Query flags:string[]):Todo

//Create Todo
// - ID is generated by client
@POST('/todo/{id}')
createTodo(@Path(id) todoId:string, @Body todo:Todo ):void

controller Todo('/todo') {
    #Get todo 
    @GET('/todo/{id}')
    innerGetTodo(@Path("id") todoId:string, @Query flags:string[]):Todo
    
    //Create Todo
    // - ID is generated by client
    @POST('/todo/{id}')
    innerCreateTodo(@Path(id) todoId:string, @Body todo:Todo ):void
}
`;

const DATA_TYPES = `
//Enum values for status
enum Status {
    ENABLED,
    DISABLED,
    UNKNOWN
}
//Tree structure data entity
type TreeNode {
    id:string
    parent:TreeNode
    children:TreeNode[]
    status: Status
    attributes: [{
        id:string
        value: string
    }]    
}

//An object representing a todo in a todo list
type Todo {
    id:string
    status:string
}

type Artifact<T> {
    type:string
    content:T
}

type DockerImage {
    name:string
    tag:string
}

type SubArtifact extends Artifact<DockerImage> {
    
}

type DockerArtifact extends Artifact<DockerImage>(type = "docker") {
    
}

`;

export default {
    title: 'DSL Model Editor',
};

export const ModelEditorEditMode = () => {
    const [models, setModels] = React.useState<ModelValue[]>([
        {
            type: ModelValueType.ENTITIES,
            name: 'Entities',
            code: DATA_TYPES,
        },
        {
            type: ModelValueType.REST,
            name: 'Methods',
            code: REST_METHODS,
        },
    ]);

    return <ModelEditor onChange={(result) => console.log('result', result)} models={models} />;
};

export const ModelEditorReadOnly = () => {
    const [models, setModels] = React.useState<ModelValue[]>([
        {
            type: ModelValueType.ENTITIES,
            name: 'Entities',
            code: DATA_TYPES,
        },
        {
            type: ModelValueType.REST,
            name: 'Methods',
            code: REST_METHODS,
        },
    ]);

    return <ModelEditor onChange={(result) => console.log('result', result)} readOnly={true} models={models} />;
};
